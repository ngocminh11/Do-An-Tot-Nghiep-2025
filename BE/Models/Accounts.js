const mongoose = require('mongoose');
const { Schema } = mongoose;
const bcrypt = require('bcryptjs');

/* ------------------ Email validator ------------------ */
const emailValidator = {
  validator: v => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(v),
  message: props => `${props.value} kh√¥ng ph·∫£i email h·ª£p l·ªá.`
};

/* ------------------ H·∫±ng s·ªë role --------------------- */
const ROLE_ENUM = [
  'Kh√°ch H√†ng',         // customer
  'Nh√¢n Vi√™n',          // staff
  'Qu·∫£n L√Ω Kho',        // warehouseManager
  'Qu·∫£n L√Ω Nh√¢n S·ª±',
  'Qu·∫£n L√Ω ƒê∆°n H√†ng',    // hrManager
  'Qu·∫£n L√Ω Ch√≠nh'       // generalManager
];

const PIN_ROLES = [
  'Qu·∫£n L√Ω Kho',
  'Qu·∫£n L√Ω Nh√¢n S·ª±',
  'Qu·∫£n L√Ω ƒê∆°n H√†ng',
  'Qu·∫£n L√Ω Ch√≠nh'
];
const PIN_REGEX = /^\d{6}$/; // ƒë√∫ng 6 ch·ªØ s·ªë

/* ------------------ Schema --------------------------- */
const userSchema = new Schema(
  {
    email: {
      type: String,
      required: true,
      unique: true,
      lowercase: true,
      trim: true,
      validate: emailValidator
    },
    emailVerified: { type: Boolean, default: false },

    passwordHash: {
      type: String,
      required: true,
      minlength: 60 // bcrypt hash length
    },

    /* üîê PIN 6‚Äës·ªë ‚Äì ch·ªâ cho 3 role ƒë·∫∑c bi·ªát */
    pin: {
      type: String,
      minlength: 6,
      maxlength: 60, // bcrypt hash length
      default: null,
      select: false // never return PIN in queries
    },

    role: {
      type: String,
      enum: ROLE_ENUM,
      default: 'Kh√°ch H√†ng',
      required: true
    },
    accountStatus: {
      type: String,
      enum: ['Ho·∫°t ƒë·ªông', 'D·ª´ng ho·∫°t ƒë·ªông', 'ƒê√£ b·ªã kh√≥a'],
      default: 'Ho·∫°t ƒë·ªông'
    },

    registrationIP: String,
    userAgent: String,
    refreshToken: String
  },
  { timestamps: true }
);

/* ------------------ R√†ng bu·ªôc PIN theo role ------------------ */
userSchema.pre('validate', function (next) {
  const needPin = PIN_ROLES.includes(this.role);
  const hasPin = typeof this.pin === 'string' && this.pin.length > 0;

  if (needPin && !hasPin)        // role c·∫ßn nh∆∞ng ch∆∞a c√≥
    this.invalidate('pin', 'Vai tr√≤ n√†y ph·∫£i thi·∫øt l·∫≠p PIN 6 s·ªë.');
  if (needPin && hasPin && !PIN_REGEX.test(this.pin)) // sai ƒë·ªãnh d·∫°ng
    this.invalidate('pin', 'PIN ph·∫£i g·ªìm ƒë√∫ng 6 ch·ªØ s·ªë.');
  if (!needPin && hasPin)        // role kh√¥ng ƒë∆∞·ª£c ph√©p c√≥ PIN
    this.invalidate('pin', 'Ch·ªâ c√°c vai tr√≤ qu·∫£n l√Ω m·ªõi ƒë∆∞·ª£c thi·∫øt l·∫≠p PIN.');

  next();
});

// Hash PIN before save if modified
userSchema.pre('save', async function (next) {
  if (this.isModified('pin') && this.pin && /^\d{6}$/.test(this.pin)) {
    this.pin = await bcrypt.hash(this.pin, 10);
  }
  next();
});

module.exports = mongoose.model('User', userSchema);
